using Shouldly;
using Xunit;

namespace Problems.Tests
{
    public class ProblemsSolutionTests
    {
        /// <summary>
        /// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
        //  Find the sum of all the multiples of 3 or 5 below 1000.
        /// </summary>
        [Theory]
        [InlineData(10, new uint[] { 3, 5 }, 23)]
        [InlineData(10, new uint[] { 3 }, 18)]
        [InlineData(1000, new uint[] { 3, 5 }, 233168)]
        public void SumOfMultiples_ShouldSuccess(int maxAmout, uint[] possibleMultiples, uint result)
        {
            Helpers.SumOfMuliples(maxAmout, possibleMultiples).ShouldBe(result);
        }
        /// <summary>
        /// Each new term in the Fibonacci sequence is generated by adding the previous two terms.
        /// By starting with 1 and 2, the first 10 terms will be:
        ///
        /// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
        ///
        /// By considering the terms in the Fibonacci sequence whose values do not exceed four million,
        /// find the sum of the even-valued terms.
        /// </summary>
        [Theory]
        [InlineData(5, 10)]
        [InlineData(10, 44)]
        public void SumOfEvenFibonacci_ShouldSuccess(long maxTerms, long result)
        {
            Helpers.SumOfEvenFibonnaci(maxTerms).ShouldBe(result);
        }

        [Theory]
        [InlineData(5, 9)]
        [InlineData(10, 187)]
        public void SumOfOddFibonacci_ShoulSuccess(long maxTerms, int result)
        {
            Helpers.SumOfOddFibonnaci(maxTerms).ShouldBe(result);
        }
    }
}
